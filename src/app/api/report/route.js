// export interface PatientObservation {
//     id: string;
//     patientId: string;
//     patientDetails: Patient;
//     hospitalDetails: Hospital;
//     imageUrls: [string];
//     conclusionText: string;
//     radiologistName: string;
//     headDoctorName: string;
//     reportUrl: string;
//     status: string;
//     updatedAt?: Timestamp;
//     createdAt?: Timestamp;
// }

// some constants

// This conclusion is not a final diagnosis and requires comparison with clinical and laboratory data.
// In case of typos, contact phone: +1234567890

const studyType = "PROTOCOL OF MRI STUDY OF THE BRAIN";
const headerNote1 = 'This report was generated by Advanced Medical Imaging System.';
const footNote1 = 'This conclusion is not a final diagnosis and requires comparison with clinical and laboratory data.';
const footNote2 = 'In case of typos, contact phone: {hospital phoneNumber goes here}';

import React from 'react';
import { NextResponse } from 'next/server';
import { getFirestore, collection, getDocs, setDoc, doc, deleteDoc, updateDoc, addDoc } from 'firebase/firestore';
import { getStorage, ref, uploadString, getDownloadURL, uploadBytes } from 'firebase/storage';
import { app } from '../../firebaseConfig';
import logo from '../../../../assets/CoMed Inc.black.png';
import { Page, Text, View, Document, StyleSheet, Font, PDFViewer, Image } from '@react-pdf/renderer';
import { Patient, Observation, Hospital, PatientObservation, ObservationDefaultView, ShareReport } from '../../types';

const storage = getStorage(app);

export async function POST(req) {
    const { data } = await req.json(); // data is PatientObservation
    try {
        // Generate the PDF document
        const pdfBlob = await generatePDF(data);

        // Save generated PDF to Firebase Storage and get download URL
        const pdfUrl = await uploadPDFToFirebaseStorage(pdfBlob, data.id);

        // Return download URL
        return NextResponse.json({ url: pdfUrl }, {
            status: 200,
        });
    } catch (error) {
        console.error('Error:', error);
        return new NextResponse(JSON.stringify({ error: { message: error.message } }), {
            status: 500,
        });
    }
}

// Function to generate a PDF using @react-pdf/renderer
const generatePDF = async (data) => {
    const { patientDetails, hospitalDetails, imageUrls, conclusionText, radiologistName, headDoctorName, createdAt } = data;

    const blob = await pdf(<ReportTemplate
        hospitalDetails={hospitalDetails}
        patientDetails={patientDetails}
        imageUrls={imageUrls}
        conclusionText={conclusionText}
        radiologistName={radiologistName}
        headDoctorName={headDoctorName}
        createdAt={createdAt}
    />).toBlob();

    return blob;
};

// Function to upload PDF to Firebase Storage
const uploadPDFToFirebaseStorage = async (pdfBlob, observationId) => {
    const storageRef = ref(storage, `reports/${observationId}.pdf`);
    await uploadBytes(storageRef, pdfBlob);
    const pdfUrl = await getDownloadURL(storageRef);
    return pdfUrl;
};

// PDF Report Template
const ReportTemplate = ({ hospitalDetails, patientDetails, imageUrls, conclusionText, radiologistName, headDoctorName, createdAt }) => (
    <Document>
        <Page size="A4" style={styles.body}>
            {/* Logo and Header */}
            <Image style={styles.header} fixed alt="CoMed Inc." width={30} height={30} src={logo} source={logo} />
            <Text style={styles.text} fixed>{headerNote1}</Text>

            {/* Hospital Information */}
            <Text style={styles.subtitle}>{hospitalDetails.name}</Text>
            <Text style={styles.subtitle}>{hospitalDetails.department}</Text>
            <Text style={styles.subtitle}>{hospitalDetails.address}. Contact: {hospitalDetails.phone}</Text>

            {/* Patient Information */}
            <Text style={styles.subtitle}>Patient Info</Text>
            <Text style={styles.text}>Full Name: {patientDetails.name}</Text>
            <Text style={styles.text}>Birth Year: {patientDetails.birthYear}</Text>
            <Text style={styles.text}>Phone Number: {patientDetails.phoneNumber}</Text>

            {/* Observation Details */}
            <Text style={styles.subtitle}>Hospital Info</Text>
            <Text style={styles.text}>Radiologist Name: {radiologistName}</Text>
            <Text style={styles.text}>Head Doctor Name: {headDoctorName}</Text>
            <Text style={styles.text}>Date: {createdAt?.toDate().toLocaleDateString()}</Text>

            {/* Brain MRI Scans */}
            <Text style={styles.subtitle}>{studyType}</Text>
            {imageUrls.map((url, index) => (
                <Image key={index} src={url} style={styles.image} />
            ))}

            {/* Conclusion */}
            <Text style={styles.subtitle}>Conclusion</Text>
            <Text style={styles.text}>{conclusionText}</Text>
            <Text style={styles.text}>{footNote1}</Text>
            <Text style={styles.text}>{footNote2.replace('{hospital phoneNumber goes here}', hospitalDetails.phone)}</Text>

            {/* Footer */}
            <Text style={styles.text}>CoMed Inc.</Text>
        </Page>
    </Document>
);

Font.register({
    family: 'Oswald',
    src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'
});

const styles = StyleSheet.create({
    body: {
        paddingTop: 35,
        paddingBottom: 65,
        paddingHorizontal: 35,
    },
    title: {
        fontSize: 24,
        textAlign: 'center',
        fontFamily: 'Oswald'
    },
    author: {
        fontSize: 12,
        textAlign: 'center',
        marginBottom: 40,
    },
    subtitle: {
        fontSize: 18,
        margin: 12,
        fontFamily: 'Oswald'
    },
    text: {
        margin: 12,
        fontSize: 14,
        textAlign: 'justify',
        fontFamily: 'Times-Roman'
    },
    image: {
        marginVertical: 15,
        marginHorizontal: 100,
    },
    header: {
        fontSize: 12,
        marginBottom: 20,
    },
    pageNumber: {
        position: 'absolute',
        fontSize: 12,
        bottom: 30,
        left: 0,
        right: 0,
        textAlign: 'center',
        color: 'grey',
    },
});

